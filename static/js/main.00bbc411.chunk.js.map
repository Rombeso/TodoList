{"version":3,"sources":["components/EditableSpan/EditableSpan.module.css","api/todolists-api.ts","utils/error-utils.ts","features/TodolistsList/Todolist/tasks-reducer.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/Todolist/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","ResponseStatusCode","handleServerNetworkError","dispatch","message","setAppErrorAC","error","setAppStatusAC","status","handleServerAppError","messages","length","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","actions","authReducer","reducer","isInitialized","setIsInitializedAC","appReducer","removeTaskAC","task","index","findIndex","t","splice","addTaskAC","todoListId","unshift","updateTaskAC","setTasksAC","tasks","changeTaskEntityStatusAC","entityStatus","extraReducers","builder","addCase","addTodolistAC","todolist","removeTodolistAC","setTodolistsAC","todolists","forEach","tl","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","then","res","resultCode","success","catch","err","console","warn","filter","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","map","clearTodosDataAC","todolistsReducer","fetchTodolistsTC","todos","items","request","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","className","style","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","Checkbox","Delete","Todolist","useDispatch","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","paddingTop","Button","TodolistsList","useEffect","useSelector","thunk","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","auth","Grid","container","padding","spacing","allTodolistTasks","Paper","to","rootReducer","combineReducers","app","store","configureStore","middleware","getDefaultMiddleware","prepend","useAppSelector","window","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","isInitilized","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,SAAW,iC,wFCiFjBC,EAMAC,E,sIArFNC,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAe,WAEpB,OAAON,EAASO,IAAoB,eAF/BD,EAAe,SAITE,GACX,OAAOR,EAASS,KAA6E,aAAc,CAACD,WALvGF,EAAe,SAOTI,GACX,OAAOV,EAASW,OAAT,qBAA4CD,KAR9CJ,EAAe,SAUTI,EAAYF,GACvB,OAAOR,EAASY,IAAT,qBAA2EF,GAAM,CAACF,WAXpFF,EAAe,SAafO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAdFP,EAAe,SAgBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KAjBlER,EAAe,SAmBbO,EAAoBL,GAC3B,OAAOR,EAASS,KAAT,qBAAgGI,EAAhG,UAAoH,CAACL,WApBvHF,EAAe,SAsBbO,EAAoBC,EAAgBC,GAC3C,OAAOf,EAASY,IAAT,qBAAiGC,EAAjG,kBAAqHC,GAAUC,IAIjIC,EAAU,SACbC,GACF,OAAOjB,EAASS,KAAuE,cAAeQ,IAFjGD,EAAU,WAKf,OAAOhB,EAASO,IAAkC,aAL7CS,EAAU,WAQf,OAAOhB,EAASW,OAAqB,iB,SAmCjCb,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KClFL,IC+GFmB,ED/GQC,EAA2B,SAACC,EAAqCC,GAC1ED,EAASE,EAAc,CAACC,MAAMF,KAC9BD,EAASI,EAAe,CAACC,OAAO,aAGvBC,EAAuB,SAAIN,EAAqCH,GACzEG,EAASI,EAAe,CAACC,OAAO,YAC5BR,EAAKU,SAASC,OACdR,EAASE,EAAc,CAACC,MAAMN,EAAKU,SAAS,MAE5CP,EAASE,EAAc,CAACC,MAAM,0B,QEHhCM,EAAQC,YAAY,CACtBC,KAAM,OACNC,aANiB,CACjBC,YAAY,GAMZC,SAAU,CACNC,gBADM,SACUC,EAAOC,GACnBD,EAAMH,WAAaI,EAAOC,QAAQC,UAIhCJ,EAAmBN,EAAMW,QAAzBL,gBAIDM,EAAcZ,EAAMa,QCb3Bb,EAAQC,YAAY,CACtBC,KAAM,MACNC,aARiB,CACjBP,OAAQ,OACRF,MAAO,KACPoB,eAAe,GAMfT,SAAU,CACNV,eADM,SACSY,EAAOC,GAClBD,EAAMX,OAASY,EAAOC,QAAQb,QAElCH,cAJM,SAIQc,EAAOC,GACjBD,EAAMb,MAAQc,EAAOC,QAAQf,OAEjCqB,mBAPM,SAOaR,EAAOC,GACtBD,EAAMO,cAAgBN,EAAOC,QAAQK,kB,EAKkBd,EAAMW,QAA3DhB,E,EAAAA,eAAgBF,E,EAAAA,cAAesB,E,EAAAA,mBAIhCC,EAAahB,EAAMa,QFf1Bb,EAAQC,YAAY,CACtBC,KAAM,QACNC,aAJiC,GAKjCE,SAAU,CACNY,aADM,SACOV,EAAOC,GAChB,IAAMU,EAAOX,EAAMC,EAAOC,QAAQzB,YAC5BmC,EAAQD,EAAKE,WAAU,SAAAC,GAAC,OAAIA,EAAExC,KAAO2B,EAAOC,QAAQxB,UACtDkC,GAAS,GACTD,EAAKI,OAAOH,EAAO,IAG3BI,UARM,SAQIhB,EAAOC,GACbD,EAAMC,EAAOC,QAAQS,KAAKM,YAAYC,QAAQjB,EAAOC,QAAQS,OAEjEQ,aAXM,SAWOnB,EAAOC,GAChB,IAAMU,EAAOX,EAAMC,EAAOC,QAAQzB,YAC5BmC,EAAQD,EAAKE,WAAU,SAAAC,GAAC,OAAIA,EAAExC,KAAO2B,EAAOC,QAAQxB,UACtDkC,GAAS,IACTD,EAAKC,GAAL,2BAAkBD,EAAKC,IAAWX,EAAOC,QAAQvB,SAGzDyC,WAlBM,SAkBKpB,EAAOC,GACdD,EAAMC,EAAOC,QAAQzB,YAAcwB,EAAOC,QAAQmB,OAEtDC,yBArBM,SAqBmBtB,EAAOC,GAC5B,IAAMU,EAAOX,EAAMC,EAAOC,QAAQzB,YAC5BmC,EAAQD,EAAKE,WAAU,SAAAC,GAAC,OAAIA,EAAExC,KAAO2B,EAAOC,QAAQxB,UACtDkC,GAAS,IACTD,EAAKC,GAAOW,aAAetB,EAAOC,QAAQqB,gBAItDC,cAAe,SAACC,GACZA,EAAQC,QAAQC,IAAe,SAAC3B,EAAOC,GACnCD,EAAMC,EAAOC,QAAQ0B,SAAStD,IAAM,MAExCmD,EAAQC,QAAQG,IAAkB,SAAC7B,EAAOC,UAC/BD,EAAMC,EAAOC,QAAQ5B,OAEhCmD,EAAQC,QAAQI,IAAgB,SAAC9B,EAAOC,GACpCA,EAAOC,QAAQ6B,UAAUC,SAAQ,SAACC,GAC9BjC,EAAMiC,EAAG3D,IAAM,Y,EAM8DmB,EAAMW,QAArFM,E,EAAAA,aAAcM,E,EAAAA,UAAWG,E,EAAAA,aAAcC,E,EAAAA,WAAYE,E,EAAAA,yBAEpDY,EAAezC,EAAMa,S,SAkD7BxB,O,qBAAAA,I,iBAAAA,I,uBAAAA,M,KAsBE,IA6DMqD,EAAe,SAACzD,EAAgB0D,EAAwC3D,GAAzD,OACxB,SAACO,EAAoBqD,GACjB,IACM1B,EADQ0B,IACKhB,MAAM5C,GAAY6D,MAAK,SAAAxB,GAAC,OAAIA,EAAExC,KAAOI,KACxD,GAAKiC,EAAL,CAKA,IAAM4B,EAA6B,aAC/BC,SAAU7B,EAAK6B,SACfC,YAAa9B,EAAK8B,YAClBC,SAAU/B,EAAK+B,SACfC,UAAWhC,EAAKgC,UAChBvE,MAAOuC,EAAKvC,MACZiB,OAAQsB,EAAKtB,QACV+C,GAEPpD,EAASI,EAAe,CAACC,OAAQ,aACjCL,EAASsC,EAAyB,CAAC5C,SAAQ6C,aAAc,UAAW9C,gBACpEP,EAAwBO,EAAYC,EAAQ6D,GACvCK,MAAK,SAAAC,GACF7D,EAASsC,EAAyB,CAAC5C,SAAQ6C,aAAc,YAAa9C,gBAClEoE,EAAIhE,KAAKiE,aAAehE,EAAmBiE,SAC3C/D,EAASI,EAAe,CAACC,OAAQ,eAEjCL,EAASmC,EAAa,CAACzC,SAAQC,MAAOyD,EAAa3D,iBAEnDa,EAAyCN,EAAU6D,EAAIhE,SAG9DmE,OAAM,SAACC,GACJlE,EAAyBC,EAAUiE,EAAIhE,iBA1B3CiE,QAAQC,KAAK,iCGhMnB1D,EAAQC,YAAY,CACtBC,KAAM,YACNC,aAJ4C,GAK5CE,SAAU,CACN+B,iBADM,SACW7B,EAAOC,GACpB,IAAMW,EAAQZ,EAAMa,WAAU,SAAAoB,GAAE,OAAIA,EAAG3D,KAAO2B,EAAOC,QAAQ5B,MACzDsC,GAAS,GACTZ,EAAMe,OAAOH,EAAO,IAG5Be,cAPM,SAOQ3B,EAAOC,GACjBD,EAAMkB,QAAN,2BAAkBjB,EAAOC,QAAQ0B,UAAjC,IAA2CwB,OAAQ,MAAO7B,aAAc,WAE5E8B,sBAVM,SAUgBrD,EAAOC,GACzB,IAAMW,EAAQZ,EAAMa,WAAU,SAAAoB,GAAE,OAAIA,EAAG3D,KAAO2B,EAAOC,QAAQ5B,MAC7D0B,EAAMY,GAAOxC,MAAQ6B,EAAOC,QAAQ9B,OAExCkF,uBAdM,SAciBtD,EAAOC,GAC1B,IAAMW,EAAQZ,EAAMa,WAAU,SAAAoB,GAAE,OAAIA,EAAG3D,KAAO2B,EAAOC,QAAQ5B,MAC7D0B,EAAMY,GAAOwC,OAASnD,EAAOC,QAAQkD,QAGzCG,6BAnBM,SAmBuBvD,EAAOC,GAChC,IAAMW,EAAQZ,EAAMa,WAAU,SAAAoB,GAAE,OAAIA,EAAG3D,KAAO2B,EAAOC,QAAQ5B,MAC7D0B,EAAMY,GAAOW,aAAetB,EAAOC,QAAQqB,cAE/CO,eAvBM,SAuBS9B,EAAOC,GAClB,OAAOA,EAAOC,QAAQ6B,UAAUyB,KAAI,SAAAvB,GAAE,kCAASA,GAAT,IAAamB,OAAQ,MAAO7B,aAAc,aAEpFkC,iBA1BM,SA0BWzD,GACb,MAAe,O,EASvBP,EAAMW,QAHNyB,G,EAAAA,iBAAkBF,G,EAAAA,cAAe0B,G,EAAAA,sBACjCvB,G,EAAAA,eAAgByB,G,EAAAA,6BAChBE,G,EAAAA,iBAAkBH,G,EAAAA,uBAGTI,GAAmBjE,EAAMa,QAiDzBqD,GAAmB,WAC5B,OAAO,SAAC3E,GACJA,EAASI,EAAe,CAACC,OAAQ,aACjCnB,IACK0E,MAAK,SAACC,GAGH,OAFA7D,EAASI,EAAe,CAACC,OAAQ,eACjCL,EAAS8C,GAAe,CAACC,UAAWc,EAAIhE,QACjCgE,EAAIhE,QAEd+D,MAAK,SAACgB,GACHA,EAAM5B,SAAQ,SAACC,GHyBH,IAACxD,EGxBTO,GHwBSP,EGxBawD,EAAG3D,GHwBO,SAACU,GACjDA,EAASI,EAAe,CAACC,OAAQ,aACjCnB,EAAsBO,GACjBmE,MAAK,SAACC,GACH,GAAuB,OAAnBA,EAAIhE,KAAKM,MAAgB,CACzBH,EAASI,EAAe,CAACC,OAAQ,eACjC,IAAMgC,EAAQwB,EAAIhE,KAAKgF,MAEvB7E,EAASoC,EAAW,CAACC,QAAO5C,qBAE5Ba,EAAyCN,EAAU6D,EAAIiB,YAI9Dd,OAAM,SAACC,GAEJlE,EAAyBC,EAAUiE,EAAIhE,qBGrCtC+D,OAAM,SAACC,GACJlE,EAAyBC,EAAUiE,EAAIhE,c,wDC7G1C8E,GAAcC,IAAMC,MAAK,SAAUC,GAC5ChB,QAAQiB,IAAI,sBAD6D,MAGjDC,mBAAS,IAHwC,oBAGpEhG,EAHoE,KAG7DiG,EAH6D,OAIjDD,mBAAwB,MAJyB,oBAIpEjF,EAJoE,KAI7DmF,EAJ6D,KAMnEC,EAAU,WACS,KAAjBnG,EAAMoG,QACNN,EAAMK,QAAQnG,GACdiG,EAAS,KAETC,EAAS,sBAiBjB,OAAO,iCACH,eAACG,GAAA,EAAD,CAAWC,QAAQ,WACRvF,QAASA,EACTgB,MAAO/B,EACPuG,SAjBS,SAACC,GACrBP,EAASO,EAAEC,cAAc1E,QAiBd2E,WAdW,SAACF,GACT,OAAVzF,GACAmF,EAAS,MAEM,KAAfM,EAAEG,UACFR,KAUOS,MAAM,QACNC,WAAY9F,EACZ+F,SAAUhB,EAAMgB,WAG3B,eAACC,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASd,EAArC,SACI,eAACe,GAAA,EAAD,Y,+BCtCCC,GAAevB,IAAMC,MAAK,SAAUC,GAC7ChB,QAAQiB,IAAI,uBAD+D,MAE7CC,oBAAS,GAFoC,oBAEtEoB,EAFsE,KAE5DC,EAF4D,OAGnDrB,mBAASF,EAAM/D,OAHoC,oBAGtE/B,EAHsE,KAG/DiG,EAH+D,KAiB3E,OAAOmB,EACD,eAACf,GAAA,EAAD,CAAWtE,MAAO/B,EAAOuG,SALX,SAACC,GACjBP,EAASO,EAAEC,cAAc1E,QAKZuF,WAAS,EAACC,OAVF,WACrBF,GAAY,GACZvB,EAAMS,SAASvG,MAUb8F,EAAMgB,SACF,uBAAMU,UAAWC,KAAMX,SAAvB,SAAkChB,EAAM/D,QACxC,uBAAM2F,cAlBS,WACrBL,GAAY,GACZpB,EAASH,EAAM/D,QAgBT,SAAwC+D,EAAM/D,W,oBCnB/C4F,GAAO/B,IAAMC,MAAK,SAACC,GAC5B,IAAM8B,EAAiBC,uBAAY,kBAAM/B,EAAMgC,WAAWhC,EAAMvD,KAAKrC,GAAI4F,EAAMzF,cAAa,CAACyF,EAAMvD,KAAKrC,GAAI4F,EAAMzF,aAE5G0H,EAAkBF,uBAAY,SAACrB,GACjC,IAAIwB,EAAiBxB,EAAEC,cAAcwB,QACrCnC,EAAMoC,iBAAiBpC,EAAMvD,KAAKrC,GAAI8H,EAAiB1I,EAAa6I,UAAY7I,EAAa8I,IAAKtC,EAAMzF,cACzG,CAACyF,EAAMvD,KAAKrC,GAAI4F,EAAMzF,aAEnBgI,EAAuBR,uBAAY,SAACS,GACtCxC,EAAMyC,gBAAgBzC,EAAMvD,KAAKrC,GAAIoI,EAAUxC,EAAMzF,cACtD,CAACyF,EAAMvD,KAAKrC,GAAI4F,EAAMzF,aAEzB,OAAO,uBAAyBmH,UAAW1B,EAAMvD,KAAKtB,SAAW3B,EAAa6I,UAAY,UAAY,GAA/F,UACH,eAACK,GAAA,EAAD,CACIP,QAASnC,EAAMvD,KAAKtB,SAAW3B,EAAa6I,UAC5CnB,MAAM,UACNT,SAAUwB,IAGd,eAACZ,GAAD,CAAcpF,MAAO+D,EAAMvD,KAAKvC,MAClBuG,SAAU8B,EACVvB,SAAiC,YAAvBhB,EAAM3C,eAE9B,eAAC4D,EAAA,EAAD,CAAYE,QAASW,EACTd,SAAiC,YAAvBhB,EAAM3C,aAD5B,SAGI,eAACsF,GAAA,EAAD,QAdS3C,EAAMvD,KAAKrC,OCCnBwI,GAAW9C,IAAMC,MAAK,SAAUC,GACzChB,QAAQiB,IAAI,mBACK4C,eAAjB,IAMMC,EAAUf,uBAAY,SAAC7H,GACzB8F,EAAM8C,QAAQ5I,EAAO8F,EAAM5F,MAC5B,CAAC4F,EAAM8C,QAAS9C,EAAM5F,KAKnB2I,EAAsBhB,uBAAY,SAAC7H,GACrC8F,EAAM+C,oBAAoB/C,EAAM5F,GAAIF,KACrC,CAAC8F,EAAM5F,GAAI4F,EAAM+C,sBAEdC,EAAoBjB,uBAAY,kBAAM/B,EAAMiD,aAAa,MAAOjD,EAAM5F,MAAK,CAAC4F,EAAM5F,GAAI4F,EAAMiD,eAC5FC,EAAuBnB,uBAAY,kBAAM/B,EAAMiD,aAAa,SAAUjD,EAAM5F,MAAK,CAAC4F,EAAM5F,GAAI4F,EAAMiD,eAClGE,EAA0BpB,uBAAY,kBAAM/B,EAAMiD,aAAa,YAAajD,EAAM5F,MAAK,CAAC4F,EAAM5F,GAAI4F,EAAMiD,eAG1GG,EAAmBpD,EAAM7C,MAQ7B,MANqB,WAAjB6C,EAAMd,SACNkE,EAAmBpD,EAAM7C,MAAM+B,QAAO,SAAAtC,GAAC,OAAIA,EAAEzB,SAAW3B,EAAa8I,QAEpD,cAAjBtC,EAAMd,SACNkE,EAAmBpD,EAAM7C,MAAM+B,QAAO,SAAAtC,GAAC,OAAIA,EAAEzB,SAAW3B,EAAa6I,cAElE,iCACH,gCAAI,eAAChB,GAAD,CAAcpF,MAAO+D,EAAM9F,MACbuG,SAAUsC,EACV/B,SAAiC,YAAvBhB,EAAM3C,eAE9B,eAAC4D,EAAA,EAAD,CACIE,QA1BW,WACnBnB,EAAMqD,eAAerD,EAAM5F,KA0BnB4G,SAAiC,YAAvBhB,EAAM3C,aAFpB,SAGI,eAACsF,GAAA,EAAD,SAGR,eAAC9C,GAAD,CAAaQ,QAASyC,EAAS9B,SAAiC,YAAvBhB,EAAM3C,eAC/C,+BAEQ+F,EAAiB9D,KAAI,SAAA1C,GAAC,OAAI,eAACiF,GAAD,CAAiBpF,KAAMG,EAAGrC,WAAYyF,EAAM5F,GACtC4H,WAAYhC,EAAMgC,WAClBS,gBAAiBzC,EAAMyC,gBACvBL,iBAAkBpC,EAAMoC,iBACxB/E,aAAcT,EAAES,cAJXT,EAAExC,SAQ/C,uBAAKuH,MAAO,CAAC2B,WAAY,QAAzB,UACI,eAACC,EAAA,EAAD,CAAQ/C,QAA0B,QAAjBR,EAAMd,OAAmB,WAAa,OAC/CiC,QAAS6B,EACT9B,MAAO,UAFf,iBAKA,eAACqC,EAAA,EAAD,CAAQ/C,QAA0B,WAAjBR,EAAMd,OAAsB,WAAa,OAClDiC,QAAS+B,EACThC,MAAO,UAFf,oBAIA,eAACqC,EAAA,EAAD,CAAQ/C,QAA0B,cAAjBR,EAAMd,OAAyB,WAAa,OACrDiC,QAASgC,EACTjC,MAAO,YAFf,gC,SCxECsC,GAA0B,WACnCC,qBAAU,WACF9H,GACAb,EAAS2E,QAEd,IAEH,IAAM5B,EAAY6F,cAAyD,SAAA5H,GAAK,OAAIA,EAAM+B,aACpFV,EAAQuG,cAA8C,SAAA5H,GAAK,OAAIA,EAAMqB,SACrErC,EAAW+H,eAEXb,EAAaD,uBAAY,SAAU3H,EAAYG,GACjD,IAAMoJ,ER6Hc,SAACpJ,EAAoBC,GAArB,OAAwC,SAACM,GACjEA,EAASI,EAAe,CAACC,OAAQ,aACjCL,EAASsC,EAAyB,CAAC5C,SAAQ6C,aAAc,UAAW9C,gBACpEP,EAAwBO,EAAYC,GAC/BkE,MAAK,SAACC,GACCA,EAAIhE,KAAKiE,aAAehE,EAAmBiE,SAC3C/D,EAASI,EAAe,CAACC,OAAQ,eACjCL,EAAS0B,EAAa,CAAChC,SAAQD,iBAE/Ba,EAAyCN,EAAU6D,EAAIiB,YAG9Dd,OAAM,SAACC,GAEJlE,EAAyBC,EAAUiE,EAAIhE,aQ3I7B6I,CAAarJ,EAAYH,GACvCU,EAAS6I,KACV,IAEGb,EAAUf,uBAAY,SAAU7H,EAAeK,GACjD,IAAMoJ,ER2IW,SAACzJ,EAAeK,GAAhB,OAAuC,SAACO,GAC7DA,EAASI,EAAe,CAACC,OAAQ,aACjCnB,EAAwBO,EAAYL,GAC/BwE,MAAK,SAAAC,GACEA,EAAIhE,KAAKiE,aAAehE,EAAmBiE,SAC3C/D,EAASI,EAAe,CAACC,OAAQ,eACjCL,EAASgC,EAAU,CAACL,KAAMkC,EAAIhE,KAAKA,KAAKkJ,SAExCzI,EAAyCN,EAAU6D,EAAIhE,SAS9DmE,OAAM,SAACC,GAEJlE,EAAyBC,EAAUiE,EAAIhE,aQ9J7B+I,CAAU5J,EAAOK,GAC/BO,EAAS6I,KACV,IAEGI,EAAehC,uBAAY,SAAU3H,EAAYe,EAAsBZ,GACzE,IAAMoJ,EAAQ1F,EAAa7D,EAAI,CAACe,UAASZ,GACzCO,EAAS6I,KACV,IAEGlB,EAAkBV,uBAAY,SAAU3H,EAAY4J,EAAkBzJ,GACxE,IAAMoJ,EAAQ1F,EAAa7D,EAAI,CAACF,MAAO8J,GAAWzJ,GAClDO,EAAS6I,KACV,IAEGV,EAAelB,uBAAY,SAAU9F,EAAyB1B,GAChE,IAAMwB,EAASqD,GAAuB,CAAChF,GAAIG,EAAY2E,OAAQjD,IAC/DnB,EAASiB,KACV,IAEGsH,EAAiBtB,uBAAY,SAAU3H,GACzC,ILiEyBG,EKjEnBoJ,GLiEmBpJ,EKjEMH,ELkE5B,SAACU,GACJA,EAASI,EAAe,CAACC,OAAQ,aACjCL,EAASuE,GAA6B,CAACjF,GAAIG,EAAY8C,aAAc,aACrErD,EAA4BO,GACvBmE,MAAK,SAACC,GACyB,IAAxBA,EAAIhE,KAAKiE,YACT9D,EAASI,EAAe,CAACC,OAAQ,eACjCL,EAAS6C,GAAiB,CAACvD,GAAIG,MAE/Ba,EAA6CN,EAAU6D,EAAIiB,YAGlEd,OAAM,SAACC,GACJlE,EAAyBC,EAAUiE,EAAIhE,cK9E/CD,EAAS6I,KACV,IAEGZ,EAAsBhB,uBAAY,SAAU3H,EAAYF,GAC1D,IAAMyJ,EL+FuB,SAACvJ,EAAYF,GAC9C,OAAO,SAACY,GACJA,EAASI,EAAe,CAACC,OAAQ,aACjCL,EAASuE,GAA6B,CAACjF,GAAIA,EAAIiD,aAAc,aAC7DrD,EAA4BI,EAAIF,GAC3BwE,MAAK,SAACC,GACH7D,EAASuE,GAA6B,CAACjF,GAAIA,EAAIiD,aAAc,eACjC,IAAxBsB,EAAIhE,KAAKiE,YACT9D,EAASI,EAAe,CAACC,OAAQ,eACjCL,EAASqE,GAAsB,CAAC/E,GAAIA,EAAIF,MAAOA,MAE/CkB,EAA6CN,EAAU6D,EAAIiB,YAGlEd,OAAM,SAACC,GACJlE,EAAyBC,EAAUiE,EAAIhE,aK9GjCkJ,CAAsB7J,EAAIF,GACxCY,EAAS6I,KACV,IAEGO,EAAcnC,uBAAY,SAAC7H,GAC7B,IAAMyJ,ELyEe,SAACzJ,GAC1B,OAAO,SAACY,GACJA,EAASI,EAAe,CAACC,OAAQ,aACjCnB,EAA4BE,GACvBwE,MAAK,SAACC,GACyB,IAAxBA,EAAIhE,KAAKiE,YACT9D,EAASI,EAAe,CAACC,OAAQ,eACjCL,EAAS2C,GAAc,CAACC,SAAUiB,EAAIhE,KAAKA,KAAKkJ,SAEhDzI,EAA6CN,EAAU6D,EAAIhE,SAGlEmE,OAAM,SAACC,GACJlE,EAAyBC,EAAUiE,EAAIhE,aKtFjCoJ,CAAcjK,GAC5BY,EAAS6I,KACV,CAAC7I,IACEa,EAAa+H,cAAuC,SAAA5H,GAAK,OAAIA,EAAMsI,KAAKzI,cAE9E,OAAIA,EAKA,uCACI,eAAC0I,GAAA,EAAD,CAAMC,WAAS,EAAC3C,MAAO,CAAC4C,QAAS,QAAjC,SACI,eAAC1E,GAAD,CAAaQ,QAAS6D,MAE1B,eAACG,GAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQ3G,EAAUyB,KAAI,SAAAvB,GACV,IAAI0G,EAAmBtH,EAAMY,EAAG3D,IAEhC,OAAO,eAACiK,GAAA,EAAD,CAAMR,MAAI,EAAV,SACH,eAACa,GAAA,EAAD,CAAO/C,MAAO,CAAC4C,QAAS,QAAxB,SACI,eAAC3B,GAAD,CACIxI,GAAI2D,EAAG3D,GACPF,MAAO6D,EAAG7D,MACVmD,aAAcU,EAAGV,aACjBF,MAAOsH,EACPzC,WAAYA,EACZiB,aAAcA,EACdH,QAASA,EACTV,iBAAkB2B,EAClB7E,OAAQnB,EAAGmB,OACXmE,eAAgBA,EAChBZ,gBAAiBA,EACjBM,oBAAqBA,OAdVhF,EAAG3D,YAbnC,eAAC,KAAD,CAAUuK,GAAI,Y,6BC/DvBC,GAAcC,aAAgB,CAChC1H,MAAOa,EACPH,UAAW2B,GACXsF,IAAKvI,EACL6H,KAAMjI,IAKG4I,GAAQC,YAAe,CAChC5I,QAAQwI,GACRK,WAAY,SAAAC,GAAoB,OAAIA,IAAuBC,QAAQxB,SAO1DyB,GAAyD1B,KAGtE2B,OAAON,MAAQA,G,wBCzBTO,GAAQxF,IAAMyF,YAAuC,SACvDvF,EAAOwF,GACP,OAAO,eAAC,KAAD,aAAUC,UAAW,EAAGD,IAAKA,EAAKhF,QAAQ,UAAaR,OAI3D,SAAS0F,KACZ,IAAMzK,EAAQmK,IAA8B,SAACtJ,GAAD,OAAWA,EAAMgJ,IAAI7J,SAC3DH,EAAW+H,eACX8C,EAAc,SAACC,EAAsCC,GAExC,cAAXA,GAGJ/K,EAASE,EAAc,CAACC,MAAM,SAGlC,OACI,eAAC6K,GAAA,EAAD,CAAUC,KAAgB,OAAV9K,EAAgB+K,iBAAkB,IAAMC,QAASN,EAAjE,SACI,eAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAQC,GAAI,CAACC,MAAO,QAA1D,SACKnL,M,sDCNJoL,GAAQ,WACjB,IAAMvL,EAAW+H,eAEXlH,EAAa+H,cAAuC,SAAA5H,GAAK,OAAIA,EAAMsI,KAAKzI,cACxE2K,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAAoD,GAW1D,OAVKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAIdI,EAAOH,SAEDG,EAAOH,SAASpL,OAAS,IAChCwL,EAAOJ,SAAW,gCAFlBI,EAAOJ,SAAW,uBAIfI,GAGXE,SAAU,SAAAH,GVLK,IAAClM,EUMZG,GVNYH,EUMKkM,EVNqB,SAAC/L,GAC/CA,EAASI,EAAe,CAACC,OAAO,aAChCT,EAAcC,GACT+D,MAAK,SAAAC,GAC0B,IAAxBA,EAAIhE,KAAKiE,YACT9D,EAASI,EAAe,CAACC,OAAO,eAChCL,EAASe,EAAgB,CAACI,OAAO,MAEjCb,EAAqBN,EAAU6D,EAAIhE,SAI1CmE,OAAM,SAACC,GACJlE,EAAyBC,EAAUiE,EAAIhE,eUNvCuL,EAAOW,eAIf,OAAItL,EACM,eAAC,KAAD,CAAUgJ,GAAI,MAEjB,eAACN,GAAA,EAAD,CAAMC,WAAS,EAAC4C,eAAgB,SAAhC,SACH,eAAC7C,GAAA,EAAD,CAAMR,MAAI,EAACqD,eAAgB,SAA3B,SAEQ,gBAACC,GAAA,EAAD,WACI,gBAACC,GAAA,EAAD,WACI,0DACI,oBAAGC,KAAM,wCACNC,OAAQ,SADX,sBAIJ,yEACA,2DACA,mDAEJ,uBAAMN,SAAUV,EAAOiB,aAAvB,SACA,gBAACC,GAAA,EAAD,WACI,eAACjH,GAAA,EAAD,aAAWO,MAAM,QACN2G,OAAO,UACHnB,EAAOoB,cAAc,WAGnCpB,EAAOqB,QAAQlB,OAChBH,EAAOQ,OAAOL,MAAQ,+BAAMH,EAAOQ,OAAOL,QAAe,KACzD,eAAClG,GAAA,EAAD,aAAWqH,KAAK,WACL9G,MAAM,WACN2G,OAAO,UACHnB,EAAOoB,cAAc,cAGnCpB,EAAOqB,QAAQjB,UAChBJ,EAAOQ,OAAOJ,SAAW,+BAAMJ,EAAOQ,OAAOJ,WAAkB,KAC/D,eAACmB,GAAA,EAAD,aAAkB/G,MAAO,cACPgH,QAAS,eAACpF,GAAA,EAAD,KACL4D,EAAOoB,cAAc,gBAE3C,eAACnE,EAAA,EAAD,CAAQqE,KAAM,SAAUpH,QAAS,YAAaU,MAAO,UAArD,gC,UCJT6G,OAxDf,WAEI,IAAM5M,EAASiK,IAAkC,SAACtJ,GAAD,OAAWA,EAAMgJ,IAAI3J,UAChE6M,EAAe5C,IAA6B,SAACtJ,GAAD,OAAWA,EAAMgJ,IAAIzI,iBAGjEvB,GAFa4I,cAAuC,SAAA5H,GAAK,OAAIA,EAAMsI,KAAKzI,cAE7DkH,gBAKjB,OAJAY,qBAAU,WACN3I,GV8B6B,SAACA,GAClCJ,IAAagE,MAAK,SAAAC,GACc,IAAxBA,EAAIhE,KAAKiE,YACT9D,EAASe,EAAgB,CAACI,OAAO,QAIpCgM,SAAQ,WACDnN,EAASwB,EAAmB,CAACD,eAAe,aUrCrD,IAEE2L,EAgBD,uBAAKtG,UAAU,MAAf,UACI,eAACwG,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,gBAACC,EAAA,EAAD,WACI,eAACnH,EAAA,EAAD,CAAYoH,KAAK,QAAQnH,MAAM,UAAUoH,aAAW,OAApD,SACI,eAACC,EAAA,EAAD,MAEJ,eAACC,EAAA,EAAD,CAAYhI,QAAQ,KAApB,kBAICwH,GAAgB,eAACzE,EAAA,EAAD,CAAQrC,MAAM,UAAUC,QAnBnC,WAClBrG,GXSsB,SAACA,GAC3BA,EAASI,EAAe,CAACC,OAAO,aAChCT,IACKgE,MAAK,SAAAC,GAC0B,IAAxBA,EAAIhE,KAAKiE,YACT9D,EAASI,EAAe,CAACC,OAAO,eAChCL,EAASe,EAAgB,CAACI,OAAO,KACjCnB,EAASyE,OAETnE,EAAqBN,EAAU6D,EAAIhE,SAI1CmE,OAAM,SAACC,GACJlE,EAAyBC,EAAUiE,EAAIhE,gBWLd,yBAIb,YAAXI,GAAwB,eAACsN,GAAA,EAAD,CAAgBvH,MAAM,cAC/C,eAACwH,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAOC,KAAM,IAAKC,QAAS,eAAC,GAAD,MAC3B,eAAC,KAAD,CAAOD,KAAM,SAAUC,QAAS,eAAC,GAAD,MAEhC,eAAC,KAAD,CAAOD,KAAM,OAAQC,QAAS,wDAC9B,eAAC,KAAD,CAAOD,KAAM,IAAKC,QAAS,eAAC,KAAD,CAAUlE,GAAG,gBAGhD,eAACe,GAAD,OAvCG,sBACH/D,MAAO,CAACwG,SAAU,QAASW,IAAK,MAAOC,UAAW,SAAU3C,MAAO,QADhE,SAEH,eAAC4C,GAAA,EAAD,OC9BGC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBzK,MAAK,YAAkD,IAA/C0K,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCAdO,IAASC,OACL,eAAC,IAAMC,WAAP,UACI,eAAC,KAAD,UACI,eAAC,KAAD,CAAU5E,MAAOA,GAAjB,SACI,eAAC,GAAD,UAIZ6E,SAASC,eAAe,SAM5BZ,O","file":"static/js/main.00bbc411.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"disabled\":\"EditableSpan_disabled__2SJhk\"};","import axios, { AxiosResponse } from 'axios'\r\nimport {RequestStatusType} from \"../app/app-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'd6f0e227-87d6-4128-94b7-d0624916d5da'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n        },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data:loginParamsType) {\r\n        return instance.post<loginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('/auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<MeResponseType>>('/auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n\r\n}\r\n\r\n\r\n// types\r\n\r\nexport type MeResponseType = {\r\n\r\n        id: number\r\n        email: string\r\n        login: string\r\n\r\n}\r\n\r\nexport type loginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, SetAppErrorType, setAppStatusAC, SetAppStatusType} from \"../app/app-reducer\";\r\nimport {ResponseType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype ActionErrorType = SetAppStatusType | SetAppErrorType\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch<ActionErrorType>, message: string) => {\r\n    dispatch(setAppErrorAC({error:message}))\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleServerAppError = <T>(dispatch: Dispatch<ActionErrorType>, data: ResponseType<T>) => {\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n    }\r\n}","import {\r\n    addTodolistAC,\r\n    AddTodolistActionType, ClearTodosDataActionType,\r\n    FilterValuesType, removeTodolistAC,\r\n    RemoveTodolistActionType, setTodolistsAC,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../../../api/todolists-api\";\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusType} from \"../../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const task = state[action.payload.todolistId]\r\n            const index = task.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                task.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const task = state[action.payload.todolistId]\r\n            const index = task.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                task[index] = {...task[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n        changeTaskEntityStatusAC(state, action: PayloadAction<{ taskId: string, entityStatus: RequestStatusType, todolistId: string }>) {\r\n            const task = state[action.payload.todolistId]\r\n            const index = task.findIndex(t => t.id !== action.payload.taskId)\r\n            if (index > -1) {\r\n                task[index].entityStatus = action.payload.entityStatus\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC, changeTaskEntityStatusAC} = slice.actions\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n\r\n// export const tasksReducer = (state: TasksStateType = initialState, action: any): TasksStateType => {\r\n//     switch (action.type) {\r\n//         case 'REMOVE-TASK':\r\n//             return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n//         case 'ADD-TASK':\r\n//             return {\r\n//                 ...state,\r\n//                 [action.task.todoListId]: [{...action.task, entityStatus: \"idle\"}, ...state[action.task.todoListId]]\r\n//             }\r\n//         case 'UPDATE-TASK':\r\n//             return {\r\n//                 ...state,\r\n//                 [action.todolistId]: state[action.todolistId]\r\n//                     .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n//             }\r\n//         case addTodolistAC.type:\r\n//             return {...state, [action.payload.todolist.id]: []}\r\n//         case removeTodolistAC.type:\r\n//             const copyState = {...state}\r\n//             delete copyState[action.payload.id]\r\n//             return copyState\r\n//         case setTodolistsAC.type: {\r\n//             const copyState = {...state}\r\n//             action.payload.todolists.forEach((tl:any) => {\r\n//                 copyState[tl.id] = []\r\n//             })\r\n//             return copyState\r\n//         }\r\n//         case 'SET-TASKS':\r\n//             return {...state, [action.todolistId]: action.tasks}\r\n//         case \"CHANGE-TASK-ENTITY-STATUS\":\r\n//             return {\r\n//                 ...state,\r\n//                 [action.todolistId]: state[action.todolistId]\r\n//                     .map(t => t.id === action.taskId ? {...t, entityStatus: action.entityStatus} : t)\r\n//             }\r\n//         case \"CLEAR-DATA\": {\r\n//             return {}\r\n//         }\r\n//\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n// actions\r\n\r\nenum ResponseStatusCode {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10,\r\n}\r\n\r\n// export const removeTaskAC = (taskId: string, todolistId: string) =>\r\n//     ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\n// export const addTaskAC = (task: TaskType) =>\r\n//     ({type: 'ADD-TASK', task} as const)\r\n// export const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n//     ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\n// export const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n//     ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n// export const changeTaskEntityStatusAC = (taskId: string, entityStatus: RequestStatusType, todolistId: string) => ({\r\n//     type: 'CHANGE-TASK-ENTITY-STATUS',\r\n//     taskId,\r\n//     entityStatus,\r\n//     todolistId\r\n// } as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            if (res.data.error === null) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                const tasks = res.data.items\r\n                // const action = setTasksAC(tasks, todolistId)\r\n                dispatch(setTasksAC({tasks, todolistId}))\r\n            } else {\r\n                handleServerAppError<{ item: TaskType }>(dispatch, res.request)\r\n\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            // dispatch(setAppErrorAC(err.message))\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTaskEntityStatusAC({taskId, entityStatus: \"loading\", todolistId}))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResponseStatusCode.success) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                dispatch(removeTaskAC({taskId, todolistId}))\r\n            } else {\r\n                handleServerAppError<{ item: TaskType }>(dispatch, res.request)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            // dispatch(setAppErrorAC(err.message))\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\n\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === ResponseStatusCode.success) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                dispatch(addTaskAC({task: res.data.data.item}))\r\n            } else {\r\n                handleServerAppError<{ item: TaskType }>(dispatch, res.data)\r\n                // dispatch(setAppStatusAC('failed'))\r\n                // if (res.data.messages.length) {\r\n                //     dispatch(setAppErrorAC(res.data.messages[0]))\r\n                // } else {\r\n                //     dispatch(setAppErrorAC('Some error occurred'))\r\n                // }\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            // dispatch(setAppErrorAC(err.message))\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTaskEntityStatusAC({taskId, entityStatus: \"loading\", todolistId}))\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                dispatch(changeTaskEntityStatusAC({taskId, entityStatus: \"succeeded\", todolistId}))\r\n                if (res.data.resultCode === ResponseStatusCode.success) {\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    // const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(updateTaskAC({taskId, model: domainModel, todolistId}))\r\n                } else {\r\n                    handleServerAppError<{ item: TaskType }>(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | SetAppStatusType\r\n    // | SetAppErrorType\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n    | ClearTodosDataActionType\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\n","import { Dispatch } from 'redux'\r\nimport { setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {authAPI, loginParamsType, TaskType, todolistsAPI} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport {addTaskAC} from \"../TodolistsList/Todolist/tasks-reducer\";\r\nimport {clearTodosDataAC, ClearTodosDataActionType} from \"../TodolistsList/Todolist/todolists-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>){\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n// type InitialStateType = typeof initialState\r\n\r\nexport const authReducer = slice.reducer\r\n//     (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n//     switch (action.type) {\r\n//         case 'login/SET-IS-LOGGED-IN':\r\n//             return {...state, isLoggedIn: action.value}\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n// actions\r\n// export const setIsLoggedInAC = (value: boolean) =>\r\n//     ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: loginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(clearTodosDataAC())\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\n\r\n\r\n// types\r\n// type ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n//     | SetAppStatusType\r\n//     | SetAppErrorType\r\n//     | ClearTodosDataActionType\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>){\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{error: string | null}>){\r\n            state.error = action.payload.error\r\n        },\r\n        setIsInitializedAC(state, action: PayloadAction<{isInitialized:boolean}>){\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n    }\r\n})\r\n\r\nexport const {setAppStatusAC, setAppErrorAC, setIsInitializedAC} = slice.actions\r\n\r\n// type InitialStateType = typeof initialState\r\n\r\nexport const appReducer = slice.reducer\r\n//     (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n//     switch (action.type) {\r\n//         case 'APP/SET-STATUS':\r\n//             return {...state, status: action.status}\r\n//         case 'APP/SET-ERROR':\r\n//             return {...state, error: action.error}\r\n//         case 'APP/SET-INITIALIZED':\r\n//             return {...state, isInitialized: action.isInitialized}\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n// export const setAppStatusAC = (status: RequestStatusType) => {\r\n//     return {\r\n//         type: 'APP/SET-STATUS',\r\n//         status\r\n//     } as const\r\n// }\r\n// export const setAppErrorAC = (error: string | null) => {\r\n//     return {\r\n//         type: 'APP/SET-ERROR',\r\n//         error\r\n//     } as const\r\n// }\r\n//\r\n// export const setIsInitializedAC = (isInitialized:boolean)=> {\r\n//     return {\r\n//         type: 'APP/SET-INITIALIZED',\r\n//         isInitialized\r\n//\r\n//     } as const\r\n// }\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n        } else {\r\n        }\r\n    })\r\n        .finally(() => {\r\n                dispatch(setIsInitializedAC({isInitialized: true}));\r\n        }\r\n        )\r\n}\r\n\r\n// type ActionsType = SetAppStatusType\r\n//     | SetAppErrorType\r\n//     | SetIsInitializedType\r\n\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorType = ReturnType<typeof setAppErrorAC>\r\n// export type SetIsInitializedType = ReturnType<typeof setIsInitializedAC>\r\n","import {Dispatch} from 'redux'\r\nimport {TaskType, todolistsAPI, TodolistType} from \"../../../api/todolists-api\";\r\nimport {\r\n    RequestStatusType,\r\n    setAppStatusAC, SetAppStatusType,\r\n} from \"../../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: \"idle\"})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        },\r\n        clearTodosDataAC(state) {\r\n            return state = []\r\n        },\r\n    }\r\n})\r\n\r\nexport const {\r\n    removeTodolistAC, addTodolistAC, changeTodolistTitleAC,\r\n    setTodolistsAC, changeTodolistEntityStatusAC,\r\n    clearTodosDataAC, changeTodolistFilterAC\r\n} = slice.actions\r\n\r\nexport const todolistsReducer = slice.reducer\r\n//     = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n//     switch (action.type) {\r\n//         case 'REMOVE-TODOLIST':\r\n//             return state.filter(tl => tl.id !== action.id)\r\n//         case 'ADD-TODOLIST':\r\n//             return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n//         case 'CHANGE-TODOLIST-TITLE':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n//         case 'CHANGE-TODOLIST-FILTER':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n//         case 'SET-TODOLISTS':\r\n//             return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n//         case \"CHANGE-TODOLIST-ENTITY-STATUS\": {\r\n//             return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n//         }\r\n//         case \"CLEAR-DATA\": {\r\n//             return  []\r\n//         }\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n// actions\r\n// export const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\n// export const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\n// export const changeTodolistTitleAC = (id: string, title: string) => ({\r\n//     type: 'CHANGE-TODOLIST-TITLE',\r\n//     id,\r\n//     title\r\n// } as const)\r\n// export const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n//     type: 'CHANGE-TODOLIST-FILTER',\r\n//     id,\r\n//     filter\r\n// } as const)\r\n// export const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n// export const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n//     type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n//     id,\r\n//     entityStatus\r\n// } as const)\r\n//\r\n// export const clearTodosDataAC = () => ({\r\n//     type: 'CLEAR-DATA'\r\n// } as const )\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = (): ThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                return res.data\r\n            })\r\n            .then((todos) => {\r\n                todos.forEach((tl) => {\r\n                    dispatch(fetchTasksTC(tl.id))\r\n                })\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: \"loading\"}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    dispatch(removeTodolistAC({id: todolistId}))\r\n                } else {\r\n                    handleServerAppError<{ item: TodolistType }>(dispatch, res.request)\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                } else {\r\n                    handleServerAppError<{ item: TodolistType }>(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: id, entityStatus: \"loading\"}))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistEntityStatusAC({id: id, entityStatus: \"succeeded\"}))\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    dispatch(changeTodolistTitleAC({id: id, title: title}))\r\n                } else {\r\n                    handleServerAppError<{ item: TodolistType }>(dispatch, res.request)\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type ChangeTodolistEntityStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>;\r\nexport type ClearTodosDataActionType = ReturnType<typeof clearTodosDataAC>;\r\nexport type ChangeTodolistTitleActionType = ReturnType<typeof changeTodolistTitleAC>;\r\nexport type ChangeTodolistFilterActionType = ReturnType<typeof changeTodolistFilterAC>;\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodolistsActionType\r\n    | ChangeTodolistEntityStatusActionType\r\n    | ClearTodosDataActionType\r\n    | SetAppStatusType\r\n// | SetAppErrorType\r\ntype ThunkType = ThunkAction<void, Array<TodolistDomainType>, unknown, ActionsType>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.disabled}\r\n\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport {changeTodolistEntityStatusAC} from \"../../features/TodolistsList/Todolist/todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport style from './EditableSpan.module.css'\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle}\r\n                     autoFocus onBlur={activateViewMode}\r\n        />\r\n        : props.disabled\r\n            ? <span className={style.disabled}>{props.value}</span>\r\n            : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\nimport {RequestStatusType} from \"../../../../app/app-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    entityStatus: RequestStatusType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title}\r\n                      onChange={onTitleChangeHandler}\r\n                      disabled={props.entityStatus === 'loading'}\r\n                      />\r\n        <IconButton onClick={onClickHandler}\r\n                    disabled={props.entityStatus === 'loading'}\r\n        >\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from './todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    entityStatus: RequestStatusType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n    const dispatch = useDispatch()\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(fetchTasksTC(props.id))\r\n    // }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    return <div>\r\n        <h3><EditableSpan value={props.title}\r\n                          onChange={changeTodolistTitle}\r\n                          disabled={props.entityStatus === 'loading'}\r\n        />\r\n            <IconButton\r\n                onClick={removeTodolist}\r\n                disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                                                entityStatus={t.entityStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./Todolist/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"./Todolist/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {TasksStateType} from \"../../app/App\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            dispatch(fetchTodolistsTC())\r\n        }\r\n    }, [])\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(todolistId, id);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value});\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    if(!isLoggedIn) {\r\n        return <Navigate to={'/Login'} />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    entityStatus={tl.entityStatus}\r\n                                    tasks={allTodolistTasks}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    filter={tl.filter}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import { tasksReducer } from '../features/TodolistsList/Todolist/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/Todolist/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport const store = configureStore({\r\n    reducer:rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, {useState} from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useAppSelector} from \"../../app/store\";\r\nimport {RequestStatusType, setAppErrorAC} from \"../../app/app-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useAppSelector<string | null>((state) => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error:null}));\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={9000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {loginParamsType} from \"../../api/todolists-api\";\r\n// type FormikErrorType = {\r\n//     email?: string\r\n//     password?: string\r\n//     rememberMe?: boolean\r\n// }\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<loginParamsType, \"captcha\">> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or more';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n       return <Navigate to={'/'}/>\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n\r\n                        />\r\n                        {formik.touched.email &&\r\n                        formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n\r\n                        />\r\n                        {formik.touched.password &&\r\n                        formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox/>}\r\n                                          {...formik.getFieldProps('rememberMe')}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                    </form>\r\n                </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {TaskType} from '../api/todolists-api'\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {AppRootStateType, useAppSelector} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nclass initialState {\r\n}\r\n\r\nfunction App() {\r\n\r\n    const status = useAppSelector<RequestStatusType>((state) => state.app.status)\r\n    const isInitilized = useAppSelector<initialState>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitilized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    // const logoutHandler = useCallback(() => {\r\n    //     dispatch(logoutTC())\r\n    // }, [dispatch])\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n\r\n                    {isInitilized && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === \"loading\" && <LinearProgress color=\"secondary\"/>}\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/'} element={<TodolistsList/>}/>\r\n                    <Route path={'/Login'} element={<Login/>}/>\r\n\r\n                    <Route path={'/404'} element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path={'*'} element={<Navigate to='/404'/>}/>\r\n                </Routes>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}